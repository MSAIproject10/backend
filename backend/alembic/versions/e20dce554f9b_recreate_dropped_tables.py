"""recreate dropped tables

Revision ID: e20dce554f9b
Revises: 31312ec1c053
Create Date: 2025-06-02 20:52:13.619753

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'e20dce554f9b'
down_revision: Union[str, None] = '31312ec1c053'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('parking',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('external_id', sa.Unicode(length=6), nullable=True),
    sa.Column('parking_name', sa.Unicode(length=50), nullable=True),
    sa.Column('address', sa.UnicodeText(), nullable=True),
    sa.Column('parking_type', sa.Unicode(length=10), nullable=True),
    sa.Column('phone_number', sa.Unicode(length=15), nullable=True),
    sa.Column('latitude', sa.Float(), nullable=True),
    sa.Column('longitude', sa.Float(), nullable=True),
    sa.Column('operation_type', sa.Unicode(length=20), nullable=True),
    sa.Column('provide_status', sa.Boolean(), nullable=False),
    sa.Column('total_capacity', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_table',
    sa.Column('uid', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('username', sa.String(length=50), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('service_count', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('uid'),
    sa.UniqueConstraint('username')
    )
    op.create_table('parking_fee_policy',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('parking_id', sa.Integer(), nullable=True),
    sa.Column('monthly_fee', sa.Integer(), nullable=True),
    sa.Column('base_fee', sa.Integer(), nullable=True),
    sa.Column('base_time_min', sa.Integer(), nullable=True),
    sa.Column('extra_fee', sa.Integer(), nullable=True),
    sa.Column('extra_time_min', sa.Integer(), nullable=True),
    sa.Column('daily_max_fee', sa.Integer(), nullable=True),
    sa.Column('weekday_pay_type', sa.Boolean(), nullable=False),
    sa.Column('saturday_pay_type', sa.Boolean(), nullable=False),
    sa.Column('holiday_pay_type', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['parking_id'], ['parking.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('parking_schedule_policy',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('parking_id', sa.Integer(), nullable=True),
    sa.Column('weekday_open', sa.String(length=4), nullable=True),
    sa.Column('weekday_close', sa.String(length=4), nullable=True),
    sa.Column('weekend_open', sa.String(length=4), nullable=True),
    sa.Column('weekend_close', sa.String(length=4), nullable=True),
    sa.Column('holiday_open', sa.String(length=4), nullable=True),
    sa.Column('holiday_close', sa.String(length=4), nullable=True),
    sa.ForeignKeyConstraint(['parking_id'], ['parking.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('parking_status',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('parking_id', sa.Integer(), nullable=True),
    sa.Column('current_occupancy', sa.Integer(), nullable=True),
    sa.Column('last_updated', sa.TIMESTAMP(), nullable=True),
    sa.Column('congestion_level', sa.Unicode(length=5), nullable=True),
    sa.ForeignKeyConstraint(['parking_id'], ['parking.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('search_log_table',
    sa.Column('log_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('uid', sa.Integer(), nullable=True),
    sa.Column('keyword', sa.String(length=100), nullable=False),
    sa.Column('searched_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['uid'], ['user_table.uid'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('log_id')
    )
    op.create_table('vehicle_table',
    sa.Column('vehicle_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('uid', sa.Integer(), nullable=True),
    sa.Column('vehicle_year', sa.Integer(), nullable=True),
    sa.Column('mileage_km', sa.Integer(), nullable=True),
    sa.Column('is_commercial', sa.Boolean(), nullable=True),
    sa.Column('vehicle_type', sa.Unicode(length=15), nullable=True),
    sa.ForeignKeyConstraint(['uid'], ['user_table.uid'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('vehicle_id')
    )
    op.create_table('parking_usage_table',
    sa.Column('usage_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('uid', sa.Integer(), nullable=True),
    sa.Column('vehicle_id', sa.Integer(), nullable=True),
    sa.Column('parking_id', sa.Integer(), nullable=True),
    sa.Column('entry_time', sa.DateTime(), nullable=False),
    sa.Column('exit_time', sa.DateTime(), nullable=False),
    sa.Column('total_fee', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['parking_id'], ['parking.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['uid'], ['user_table.uid'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['vehicle_id'], ['vehicle_table.vehicle_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('usage_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('parking_usage_table')
    op.drop_table('vehicle_table')
    op.drop_table('search_log_table')
    op.drop_table('parking_status')
    op.drop_table('parking_schedule_policy')
    op.drop_table('parking_fee_policy')
    op.drop_table('user_table')
    op.drop_table('parking')
    # ### end Alembic commands ###
